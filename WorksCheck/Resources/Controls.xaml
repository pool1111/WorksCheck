<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTemplate x:Key="CommonButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="border" Background="Transparent" CornerRadius="4">
            <TextBlock Foreground="{StaticResource TextColor}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--縦を中央にしたい場合はVerticalAligimentをCenterに要素レベルで変えてください-->
    <Style x:Key="CustomTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="3"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Name="border" CornerRadius="4,4,0,0" Background="{StaticResource TextBackground}"/>

                        <TextBox Name="Textbox" Grid.Row="0" Text="{TemplateBinding Text}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
                                    <Setter Property="CaretBrush" Value="{StaticResource TextCaretColor}"/>
                                    <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionColor}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="FontSize" Value="14"/>
                                    <Setter Property="FontFamily" Value="{StaticResource NotoSansJP-Regular}"/>
                                    <Setter Property="VerticalAlignment" Value="{Binding VerticalAlignment,RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"/>
                                    <Setter Property="AcceptsReturn" Value="{Binding AcceptsReturn,RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"/>
                                    <Setter Property="TextWrapping" Value="{Binding TextWrapping,RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"/>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <Border Grid.Row="1" Name="border2" CornerRadius="0,0,4,4" Background="{StaticResource TextBorderNoFocusColor}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border2" Value="{StaticResource TextBorderIsFocusColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomComboBoxItem1" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="border" Padding="2" SnapsToDevicePixels="True" Background="Transparent" Height="{Binding Height,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
                        <ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}" HorizontalAlignment="{Binding HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ComboboxItemMouseOverColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Grid.ColumnSpan="2" BorderThickness="1" BorderBrush="Transparent" Background="Transparent"/>
            <Border Grid.Column="0" Margin="1" BorderBrush="Transparent" Background="Transparent"/>

            <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Fill="{StaticResource ComboboxTriangleColor}"/>
        </Grid>
    </ControlTemplate>
    
    <Style x:Key="CustomCombobox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="3"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" x:Name="ComboboxBackground" CornerRadius="4,4,0,0"/>
                        <ToggleButton Grid.Row="0" x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButtonStyle}" Grid.Column="2" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding  SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="3,3,23,3" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                        <TextBox Grid.Row="0" x:Name="PART_EditableTextBox" Style="{x:Null}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="3,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}">
                            <TextBox.Template>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Border Name="PART_ContentHost" Focusable="False"/>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide" PlacementTarget="{Binding ElementName=border2}" PlacementRectangle="0,0,0,10">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" CornerRadius="4" BorderThickness="1" BorderBrush="{StaticResource DropDownBorderColor}" Background="{StaticResource DropDownBackgroundColor}">
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>

                        <Border Grid.Row="1" x:Name="border2" Background="{StaticResource ComboboxBorderNoFocusColor}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border2" Value="{StaticResource ComboboxBorderIsFocusColor}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource MouseOverColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CustomCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Grid x:Name="EnableTrue" Width="16" Height="17">
                                    <Border x:Name="CheckNull" CornerRadius="15" Width="15" Height="15" HorizontalAlignment="Left" VerticalAlignment="Center" Background="Transparent" BorderBrush="{StaticResource CheckNullBackgroundAndBorderColor}" BorderThickness="2"/>
                                    <Border x:Name="CheckRect" CornerRadius="15" Width="15" Height="15" HorizontalAlignment="Left" VerticalAlignment="Center" Background="Transparent" BorderBrush="{StaticResource CheckRectBorderColor}" BorderThickness="2"/>
                                    <Border x:Name="CheckMark" CornerRadius="15" IsHitTestVisible="False" SnapsToDevicePixels="False" Background="{StaticResource AppmainColor}" Width="15" Height="15" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                </Grid>
                                <Grid x:Name="EnableFalse" Width="16">
                                    <Border CornerRadius="15" Width="15" Height="15" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{StaticResource CheckBoxEnableFalseBackgroundColor}" BorderBrush="{StaticResource CheckBoxEnableFalseBorderColor}" BorderThickness="2"/>
                                </Grid>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <BulletDecorator.Child>
                            <ContentPresenter/>
                        </BulletDecorator.Child>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="EnableTrue" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="EnableFalse" Property="Visibility" Value="Collapsed"/>
                            <!--collapsedは空白の部分が消える-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="EnableTrue" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="EnableFalse" Property="Visibility" Value="Visible"/>
                            <Setter Property="Foreground" Value="{StaticResource CheckBoxEnableFalseBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckNull" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckRect" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckNull" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckRect" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckRect" Property="BorderBrush" Value="{StaticResource AppmainColor}"/>
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckNull" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckRect" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckRect" Property="BorderBrush" Value="{StaticResource AppmainColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>